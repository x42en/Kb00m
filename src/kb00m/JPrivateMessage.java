package kb00m;

/*
 * Â© 2013 - Certiwise Software Services (www.certiwise.com)
 * 
 * KB00m code is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public 
 * License as published by the Free Software Foundation; either 
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This code is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public 
 * License along with this program; if not, write to the Free 
 * Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, 
 * MA  02111-1307, USA.
 * 
 * Author      : Ben Mz
 * Contact Mail: bmz at certiwise dot com
 * Softwares   : JXTA Version 2.7, JDK Version 1.6.0_05, NetBeans IDE Version 7.1.1, BouncyCastle Version 1.47
 * 
 */


import java.io.File;
import java.io.IOException;
import java.security.SecureRandom;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import net.jxta.endpoint.Message;
import net.jxta.endpoint.StringMessageElement;
import net.jxta.peergroup.PeerGroup;
import net.jxta.pipe.OutputPipe;
import net.jxta.pipe.PipeService;
import net.jxta.protocol.PipeAdvertisement;


public class JPrivateMessage extends GUI {

    private JTable activeDownload = null;
    
    //Initialisation of the crypto tools for direct messaging
    private static byte[]  SESSION_SEED = new byte[16];
    private static byte[] aesIV = null;
    private static String SEED = null;
    private String directMsg=null;
    private String directFile=null;
    private String directFileSize=null;
    private String directFileHash=null;
    private String remotePeer = null;
    private LibraryModel library = null;
    private Share shareSrvc = null;

    //Standard local variable
    private PeerGroup group = null;
    private PipeService pipeSrvc = null;
    private OutputPipe outPipe = null;

    //Initialize the session seed used to encrypt stuff ;)
    static
    {
        try
        {
            SecureRandom rand = SecureRandom.getInstance("SHA1PRNG");
            rand.nextBytes(SESSION_SEED);

        }
        catch (Exception e){}
    }

    //Constructor of a creation message
    public JPrivateMessage(PeerGroup pg, String dest, LibraryModel lib) {
        initComponents();
        this.group = pg;
        this.pipeSrvc = group.getPipeService();
        this.remotePeer = dest;
        this.library = lib;
        
        showPrivateMessageCreation(this.remotePeer);
    }

    //Constructor of a received message
    public JPrivateMessage(Share share, PeerGroup pg, String from, String file, String size, String hash, String msg, JTable active) {
        initComponents();
        this.group = pg;
        this.pipeSrvc = group.getPipeService();
        this.shareSrvc = share;
        this.directFile = file;
        this.directFileSize = size;
        this.directFileHash = hash;
        this.directMsg = msg;
        this.remotePeer = from;
        this.activeDownload = active;
        
        showPrivateMessageReceived(this.remotePeer, this.directFile, this.directMsg);
    }

    private void displayLog(String s){
        if(Kb00m.GUI_MODE){
            GUI.addLogMsg(s);
        }else{
            System.out.println(s);
        }
    }

//    //Display message in GUI mode
//    protected void displayMessage(boolean create){
//        if(create){
//            showPrivateMessageCreation(this.remotePeer);
//        }else{
//            
//        }
//    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jReceivedPrivateMsg = new javax.swing.JDialog();
        jHeaderAlert4 = new javax.swing.JPanel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        labelPMR = new java.awt.Label();
        jReadPMR = new javax.swing.JButton();
        jContentPMR = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextPrivateMsgR = new javax.swing.JTextArea();
        jLabel18 = new javax.swing.JLabel();
        labelFilePMR = new javax.swing.JLabel();
        downloadFilePMR = new javax.swing.JButton();
        jProgressBarPMR = new javax.swing.JProgressBar();
        jDialogPrivateMsg = new javax.swing.JDialog();
        jHeaderAlert3 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        labelPM = new java.awt.Label();
        jCreatePM = new javax.swing.JButton();
        jContentPM = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPrivateMsg = new javax.swing.JTextArea();
        jLabelPwdPM = new javax.swing.JLabel();
        jPasswordPM = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        onOffPwdPM = new com.petersoft.advancedswing.onoffbutton.OnOffButton();
        jLabel23 = new javax.swing.JLabel();
        onOffFilePM = new com.petersoft.advancedswing.onoffbutton.OnOffButton();
        jSelectFilePM = new javax.swing.JButton();
        jLabelFilePM = new javax.swing.JLabel();
        jLabelSecured = new javax.swing.JLabel();
        jSecureLevel = new javax.swing.JLabel();

        jReceivedPrivateMsg.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        jReceivedPrivateMsg.setTitle("Private Message Received");
        jReceivedPrivateMsg.setAlwaysOnTop(true);
        jReceivedPrivateMsg.setBackground(new java.awt.Color(204, 204, 204));
        jReceivedPrivateMsg.setBounds(new java.awt.Rectangle(500, 250, 471, 410));
        jReceivedPrivateMsg.setEnabled(false);
        jReceivedPrivateMsg.setName("jGroupCreationDialog"); // NOI18N

        jHeaderAlert4.setBackground(new java.awt.Color(0, 0, 0));
        jHeaderAlert4.setForeground(new java.awt.Color(153, 153, 153));

        jLabel19.setFont(new java.awt.Font("Silom", 1, 40)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(0, 153, 0));
        jLabel19.setText("Kb00m");
        jLabel19.setFocusable(false);

        jLabel20.setFont(new java.awt.Font("Monaco", 1, 12)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(153, 153, 153));
        jLabel20.setText("Search, Chat, Share... change the World!!");
        jLabel20.setFocusable(false);

        org.jdesktop.layout.GroupLayout jHeaderAlert4Layout = new org.jdesktop.layout.GroupLayout(jHeaderAlert4);
        jHeaderAlert4.setLayout(jHeaderAlert4Layout);
        jHeaderAlert4Layout.setHorizontalGroup(
            jHeaderAlert4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jHeaderAlert4Layout.createSequentialGroup()
                .addContainerGap(148, Short.MAX_VALUE)
                .add(jLabel20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 292, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(31, 31, 31))
            .add(jHeaderAlert4Layout.createSequentialGroup()
                .add(92, 92, 92)
                .add(jLabel19)
                .addContainerGap())
        );
        jHeaderAlert4Layout.setVerticalGroup(
            jHeaderAlert4Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jHeaderAlert4Layout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .add(jLabel19, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 37, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jLabel20)
                .addContainerGap())
        );

        labelPMR.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        labelPMR.setText("You have received a new message from \n");

        jReadPMR.setText("OK");
        jReadPMR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jReadPMRActionPerformed(evt);
            }
        });

        jScrollPane3.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane3.setEnabled(false);

        jTextPrivateMsgR.setColumns(20);
        jTextPrivateMsgR.setEditable(false);
        jTextPrivateMsgR.setRows(5);
        jScrollPane3.setViewportView(jTextPrivateMsgR);

        org.jdesktop.layout.GroupLayout jContentPMRLayout = new org.jdesktop.layout.GroupLayout(jContentPMR);
        jContentPMR.setLayout(jContentPMRLayout);
        jContentPMRLayout.setHorizontalGroup(
            jContentPMRLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jContentPMRLayout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane3)
                .addContainerGap())
        );
        jContentPMRLayout.setVerticalGroup(
            jContentPMRLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jContentPMRLayout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jScrollPane3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 105, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(23, 23, 23))
        );

        jLabel18.setText("Attached File:");

        labelFilePMR.setFont(new java.awt.Font("Lucida Grande", 3, 14)); // NOI18N
        labelFilePMR.setForeground(new java.awt.Color(0, 153, 0));
        labelFilePMR.setText("No File attached...");
        labelFilePMR.setEnabled(false);

        downloadFilePMR.setText("Download");
        downloadFilePMR.setToolTipText("Download attached file to a specified place");
        downloadFilePMR.setEnabled(false);
        downloadFilePMR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadFilePMRActionPerformed(evt);
            }
        });

        jProgressBarPMR.setToolTipText("Download progress");
        jProgressBarPMR.setEnabled(false);
        jProgressBarPMR.setFocusable(false);
        jProgressBarPMR.setName("PMRDownload"); // NOI18N
        jProgressBarPMR.setStringPainted(true);

        org.jdesktop.layout.GroupLayout jReceivedPrivateMsgLayout = new org.jdesktop.layout.GroupLayout(jReceivedPrivateMsg.getContentPane());
        jReceivedPrivateMsg.getContentPane().setLayout(jReceivedPrivateMsgLayout);
        jReceivedPrivateMsgLayout.setHorizontalGroup(
            jReceivedPrivateMsgLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jHeaderAlert4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(jReceivedPrivateMsgLayout.createSequentialGroup()
                .add(jReceivedPrivateMsgLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jReceivedPrivateMsgLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(jContentPMR, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .add(jReceivedPrivateMsgLayout.createSequentialGroup()
                        .add(jReceivedPrivateMsgLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jReceivedPrivateMsgLayout.createSequentialGroup()
                                .add(45, 45, 45)
                                .add(labelPMR, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(jReceivedPrivateMsgLayout.createSequentialGroup()
                                .add(188, 188, 188)
                                .add(jReadPMR))
                            .add(jReceivedPrivateMsgLayout.createSequentialGroup()
                                .add(29, 29, 29)
                                .add(jLabel18)))
                        .add(0, 0, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jReceivedPrivateMsgLayout.createSequentialGroup()
                        .add(jReceivedPrivateMsgLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(jReceivedPrivateMsgLayout.createSequentialGroup()
                                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(jProgressBarPMR, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 425, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                            .add(jReceivedPrivateMsgLayout.createSequentialGroup()
                                .add(90, 90, 90)
                                .add(labelFilePMR)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .add(downloadFilePMR)))
                        .add(15, 15, 15)))
                .addContainerGap())
        );
        jReceivedPrivateMsgLayout.setVerticalGroup(
            jReceivedPrivateMsgLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jReceivedPrivateMsgLayout.createSequentialGroup()
                .add(jHeaderAlert4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(19, 19, 19)
                .add(labelPMR, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jContentPMR, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 118, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel18)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jReceivedPrivateMsgLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(labelFilePMR)
                    .add(downloadFilePMR))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jProgressBarPMR, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(jReadPMR)
                .addContainerGap(21, Short.MAX_VALUE))
        );

        jDialogPrivateMsg.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        jDialogPrivateMsg.setTitle("Private Message Creation");
        jDialogPrivateMsg.setAlwaysOnTop(true);
        jDialogPrivateMsg.setBounds(new java.awt.Rectangle(500, 250, 551, 530));
        jDialogPrivateMsg.setEnabled(false);
        jDialogPrivateMsg.setName("jGroupCreationDialog"); // NOI18N

        jHeaderAlert3.setBackground(new java.awt.Color(0, 0, 0));
        jHeaderAlert3.setForeground(new java.awt.Color(153, 153, 153));

        jLabel16.setFont(new java.awt.Font("Silom", 1, 40)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(0, 153, 0));
        jLabel16.setText("Kb00m");
        jLabel16.setFocusable(false);

        jLabel17.setFont(new java.awt.Font("Monaco", 1, 12)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(153, 153, 153));
        jLabel17.setText("Search, Chat, Share... change the World!!");
        jLabel17.setFocusable(false);

        org.jdesktop.layout.GroupLayout jHeaderAlert3Layout = new org.jdesktop.layout.GroupLayout(jHeaderAlert3);
        jHeaderAlert3.setLayout(jHeaderAlert3Layout);
        jHeaderAlert3Layout.setHorizontalGroup(
            jHeaderAlert3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jHeaderAlert3Layout.createSequentialGroup()
                .add(92, 92, 92)
                .add(jLabel16)
                .addContainerGap())
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jHeaderAlert3Layout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jLabel17, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 292, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(113, 113, 113))
        );
        jHeaderAlert3Layout.setVerticalGroup(
            jHeaderAlert3Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jHeaderAlert3Layout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .add(jLabel16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 37, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jLabel17)
                .addContainerGap())
        );

        labelPM.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        labelPM.setText("You're about to send a message to ");

        jCreatePM.setText("OK");
        jCreatePM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCreatePMActionPerformed(evt);
            }
        });

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane2.setEnabled(false);

        jTextPrivateMsg.setColumns(20);
        jTextPrivateMsg.setLineWrap(true);
        jTextPrivateMsg.setRows(5);
        jTextPrivateMsg.setWrapStyleWord(true);
        jScrollPane2.setViewportView(jTextPrivateMsg);

        org.jdesktop.layout.GroupLayout jContentPMLayout = new org.jdesktop.layout.GroupLayout(jContentPM);
        jContentPM.setLayout(jContentPMLayout);
        jContentPMLayout.setHorizontalGroup(
            jContentPMLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jContentPMLayout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 498, Short.MAX_VALUE)
                .addContainerGap())
        );
        jContentPMLayout.setVerticalGroup(
            jContentPMLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, jContentPMLayout.createSequentialGroup()
                .addContainerGap()
                .add(jScrollPane2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabelPwdPM.setText("Password (8-digits min.)");
        jLabelPwdPM.setEnabled(false);

        jPasswordPM.setEnabled(false);
        jPasswordPM.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jPasswordPMKeyTyped(evt);
            }
        });

        jLabel22.setText("Protect with password");

        onOffPwdPM.setText("onOffButton1");
        onOffPwdPM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onOffPwdPMActionPerformed(evt);
            }
        });

        jLabel23.setText("Add a file");

        onOffFilePM.setText("onOffButton1");
        onOffFilePM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onOffFilePMActionPerformed(evt);
            }
        });

        jSelectFilePM.setText("Attach a File");
        jSelectFilePM.setEnabled(false);
        jSelectFilePM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSelectFilePMActionPerformed(evt);
            }
        });

        jLabelFilePM.setText("No File selected...");
        jLabelFilePM.setEnabled(false);

        jLabelSecured.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        jLabelSecured.setForeground(new java.awt.Color(0, 102, 0));
        jLabelSecured.setText("The message/file will be encrypted with strong AES-256 bits encryption");

        jSecureLevel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Picts/Small/errorIcon.png"))); // NOI18N
        jSecureLevel.setEnabled(false);

        org.jdesktop.layout.GroupLayout jDialogPrivateMsgLayout = new org.jdesktop.layout.GroupLayout(jDialogPrivateMsg.getContentPane());
        jDialogPrivateMsg.getContentPane().setLayout(jDialogPrivateMsgLayout);
        jDialogPrivateMsgLayout.setHorizontalGroup(
            jDialogPrivateMsgLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jHeaderAlert3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .add(jDialogPrivateMsgLayout.createSequentialGroup()
                .add(45, 45, 45)
                .add(jDialogPrivateMsgLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jDialogPrivateMsgLayout.createSequentialGroup()
                        .add(labelPM, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(0, 0, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jDialogPrivateMsgLayout.createSequentialGroup()
                        .add(0, 0, Short.MAX_VALUE)
                        .add(jDialogPrivateMsgLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabelFilePM)
                            .add(jLabel22)
                            .add(jLabelPwdPM)
                            .add(jLabel23))
                        .add(18, 18, 18)
                        .add(jDialogPrivateMsgLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jDialogPrivateMsgLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                .add(org.jdesktop.layout.GroupLayout.TRAILING, jDialogPrivateMsgLayout.createSequentialGroup()
                                    .add(jSelectFilePM)
                                    .add(211, 211, 211))
                                .add(jDialogPrivateMsgLayout.createSequentialGroup()
                                    .add(jPasswordPM, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 229, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(18, 18, 18)
                                    .add(jSecureLevel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .addContainerGap()))
                            .add(jDialogPrivateMsgLayout.createSequentialGroup()
                                .add(jDialogPrivateMsgLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                    .add(onOffFilePM, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 53, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                                    .add(onOffPwdPM, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 53, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap())))))
            .add(jDialogPrivateMsgLayout.createSequentialGroup()
                .add(jDialogPrivateMsgLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jDialogPrivateMsgLayout.createSequentialGroup()
                        .add(47, 47, 47)
                        .add(jLabelSecured))
                    .add(jDialogPrivateMsgLayout.createSequentialGroup()
                        .add(23, 23, 23)
                        .add(jContentPM, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jDialogPrivateMsgLayout.createSequentialGroup()
                        .add(220, 220, 220)
                        .add(jCreatePM)))
                .add(0, 0, Short.MAX_VALUE))
        );
        jDialogPrivateMsgLayout.setVerticalGroup(
            jDialogPrivateMsgLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jDialogPrivateMsgLayout.createSequentialGroup()
                .add(jHeaderAlert3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(19, 19, 19)
                .add(labelPM, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jDialogPrivateMsgLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel22)
                    .add(onOffPwdPM, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jDialogPrivateMsgLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jPasswordPM, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabelPwdPM)
                    .add(jSecureLevel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .add(18, 18, 18)
                .add(jDialogPrivateMsgLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel23)
                    .add(onOffFilePM, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 16, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(6, 6, 6)
                .add(jDialogPrivateMsgLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jSelectFilePM)
                    .add(jLabelFilePM))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(jContentPM, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabelSecured)
                .add(18, 18, 18)
                .add(jCreatePM)
                .add(23, 23, 23))
        );

        setTitle("New Message");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jCreatePMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCreatePMActionPerformed

        String dest = JPrivateMessage.jDialogPrivateMsg.getName();
        String filePM = jLabelFilePM.getText();
        
        //Allow warning to pop-up over the dialog
        JPrivateMessage.jDialogPrivateMsg.setAlwaysOnTop(false);
        
        //If the user has written a message or want to send a private file
        if (jTextPrivateMsg.getText().length() > 0 || (onOffFilePM.isSelected() && !filePM.equals("No File selected..."))) {
            try {
                String tmpPass = null;
                String text = jTextPrivateMsg.getText();

                //Check the file shared path
                if (!onOffFilePM.isSelected() || filePM.equals("No File selected...")) {
                    filePM = "EMPTY";
                    displayLog("[+]No file to share");
                } else if (onOffFilePM.isSelected() && !filePM.equals("No File selected...")) {//If a file is selected
                    displayLog("[+]Sharing temporary the file requested: " + filePM);
                }

                //If the user has specify a password, we encrypt the text and send a hash of the password
                if (onOffPwdPM.isSelected() && jPasswordPM.getText().length() >= 8) {
                    //Generate the Password hash to send private communication
                    tmpPass = Tools.getHash(jPasswordPM.getText());
                    
                    //Encrypt the message
                    if (text.isEmpty()) {
                        text = Tools.encryptAES("EMPTY", jPasswordPM.getText(), SESSION_SEED);
                    } else {
                        text = Tools.encryptAES(text, jPasswordPM.getText(), SESSION_SEED);
                    }

                    //send an encrypted message
                    sendPrivateEncryptedMessage(dest, text, filePM, tmpPass);
//                    JPrivateMessage.jDialogPrivateMsg.setVisible(false);
                    JPrivateMessage.jDialogPrivateMsg.dispose();
                    this.removeAll();
                } else if (!onOffPwdPM.isSelected()) {
                    //send a clear text message
                    sendPrivateMessage(dest, text, filePM);
//                    JPrivateMessage.jDialogPrivateMsg.setVisible(false);
                    JPrivateMessage.jDialogPrivateMsg.dispose();
                    this.removeAll();
                    
                } else{
                    JOptionPane.showMessageDialog(null, "Careful your password is not long enough!!");
                    //Dialog comes again over all windows
                    JPrivateMessage.jDialogPrivateMsg.setAlwaysOnTop(true);
                }

            } catch (Exception ex) {
                displayLog("[!]Exception while encrypting message: "+ex.getMessage());
            }

        } else {
            JOptionPane.showMessageDialog(null, "Careful you need to first write a message and/or share a file !!");
            //Dialog comes again over all windows
            JPrivateMessage.jDialogPrivateMsg.setAlwaysOnTop(true);
        }

        
    }//GEN-LAST:event_jCreatePMActionPerformed

    private void jPasswordPMKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jPasswordPMKeyTyped
        synchronized (this) {
            if (jPasswordPM.getText().equals("") || jPasswordPM.getText().length() < 8) {
                jSecureLevel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Picts/Small/errorIcon.png")));
            } else {
                jSecureLevel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Picts/Small/verifyIcon.png")));
            }
        }
    }//GEN-LAST:event_jPasswordPMKeyTyped

    private void onOffPwdPMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onOffPwdPMActionPerformed
        if (!onOffPwdPM.isSelected()) {
            jLabelPwdPM.setEnabled(true);
            jPasswordPM.setEnabled(true);
            jLabelSecured.setVisible(true);
            jSecureLevel.setEnabled(true);
        } else {
            jLabelPwdPM.setEnabled(false);
            jPasswordPM.setEnabled(false);
            jLabelSecured.setVisible(false);
            jSecureLevel.setEnabled(false);
        }
    }//GEN-LAST:event_onOffPwdPMActionPerformed

    private void onOffFilePMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onOffFilePMActionPerformed
        if (!onOffFilePM.isSelected()) {
            jLabelFilePM.setEnabled(true);
            jSelectFilePM.setEnabled(true);
        } else {
            jLabelFilePM.setEnabled(false);
            jSelectFilePM.setEnabled(false);
        }
    }//GEN-LAST:event_onOffFilePMActionPerformed

    private void jSelectFilePMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSelectFilePMActionPerformed
        JPrivateMessage.jDialogPrivateMsg.setAlwaysOnTop(false);
        JFileChooser chooserPM = new JFileChooser();
        chooserPM.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int retVal = chooserPM.showOpenDialog(this);
        if (retVal == JFileChooser.APPROVE_OPTION) {
            String filePath = chooserPM.getSelectedFile().getAbsolutePath();
            String fileName = chooserPM.getSelectedFile().getName();
            displayLog("[+] Private File to send selected: " + fileName);
            jLabelFilePM.setText(filePath);
            File tmp = new File(filePath);
            try {
                library.addFile(library.getRoot(),tmp);
            } catch (Exception ex) {
                displayLog("[!]Exception while adding " + fileName + " to the local library "+ex.getMessage());
            }
        }
        jDialogPrivateMsg.setAlwaysOnTop(true);
    }//GEN-LAST:event_jSelectFilePMActionPerformed

    private void jReadPMRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jReadPMRActionPerformed
        //Wen the user click on OK
        JPrivateMessage.jDialogPrivateMsg.setAlwaysOnTop(false);
//        JPrivateMessage.jReceivedPrivateMsg.setVisible(false);
        JPrivateMessage.jReceivedPrivateMsg.dispose();
        this.removeAll();
    }//GEN-LAST:event_jReadPMRActionPerformed

    private void downloadFilePMRActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downloadFilePMRActionPerformed
        //String context, String seeder, String fileName, String hash, String size, int part
        File tmp = new File(Core.sharedPath.getAbsolutePath()+Kb00m.OS_FILE_SEPARATOR+directFile);
        if(tmp.exists()){
            //The file already exists in our shared directory
            JOptionPane.showMessageDialog(null,"The requested file "+tmp.getName()+" is already in your shared directory !!");
            return;
        }
//        shareSrvc.downloadFile("PRIVATE", remotePeer, directFile, directFileHash, directFileSize, 1);
          //      B00mGroup.getPeerGroupID(), false, labelFilePMR.getText().getBytes()), myDownloadTable);
    }//GEN-LAST:event_downloadFilePMRActionPerformed
    
    private void showPrivateMessageCreation(String dst) {                                               
        JPrivateMessage.jDialogPrivateMsg.doLayout();
        String[] tmp = dst.split(" ");
        JPrivateMessage.jDialogPrivateMsg.setName(tmp[0]);
        //int optionPicked = JOptionPane.showConfirmDialog(null, "To send a Message to a specific person you need to select one!! ;)");
        labelPM.setText("You're about to send a message to "+tmp[0]);
        jTextPrivateMsg.setEditable(true);
        JPrivateMessage.jDialogPrivateMsg.setVisible(true);
        JPrivateMessage.jDialogPrivateMsg.setEnabled(true);
        JPrivateMessage.jReceivedPrivateMsg.setVisible(false);
        jLabelSecured.setVisible(false);
    }
    
    protected void showPrivateMessageReceived(String sender, String fileName, String message){
        JPrivateMessage.jDialogPrivateMsg.doLayout();
        labelPMR.setText("You have received a new message from  "+sender);
        jTextPrivateMsgR.setText(message);
        
        //Test if file is filled
        if(fileName!=null && !fileName.equals("EMPTY")){
            labelFilePMR.setText(fileName);
            labelFilePMR.setEnabled(true);
            downloadFilePMR.setEnabled(true);

        }else{
            labelFilePMR.setText("No File attached...");
            labelFilePMR.setEnabled(false);
            downloadFilePMR.setEnabled(false);
        }
        JPrivateMessage.jDialogPrivateMsg.setVisible(false);
        JPrivateMessage.jReceivedPrivateMsg.setVisible(true);
        JPrivateMessage.jReceivedPrivateMsg.setEnabled(true);
        JPrivateMessage.jReceivedPrivateMsg.setAlwaysOnTop(true);

    }
    
    protected static void setIV(byte[] input){
        aesIV = input;
    }
    
    private void sendPrivateMessage(String dest, String mess, String fName){
        sendMsg(dest, mess, fName, null);
    }

    private void sendPrivateEncryptedMessage(String dest, String mess, String fName, String hpass){
        sendMsg(dest, mess, fName, hpass);
    }

    protected void sendMsg(String RemoteName, String txtPM, String filePM, String passHashPM) {
        
        String fileHashPM = null;
        String fileSizePM = null;
        
        try {

            DateFormat dateFormat = new SimpleDateFormat("HH:mm:ss");
            Date date = new Date();
            String myTime = dateFormat.format(date).toString();
            
            Message myMessage = new Message();
            //adding timestap and peers details also messages to XML tag and send them 
            StringMessageElement sme = new StringMessageElement("PeerName", group.getPeerName(), null);
            StringMessageElement sme1 = new StringMessageElement("SessionID", "PRIVATE", null);
            StringMessageElement sme2 = null;
            StringMessageElement sme3 = null;
            StringMessageElement sme4 = null;
            StringMessageElement sme5 = null;
            StringMessageElement sme6 = null;
            StringMessageElement sme7 = null;
            StringMessageElement sme8 = new StringMessageElement("Type", "PRIVATEMSG", null);
            StringMessageElement sme9 = new StringMessageElement("Time", myTime, null);

            
        
            //Positioning the values
            //We need to feed messages with value even for null object
            if(txtPM != null && !txtPM.isEmpty()){
                sme2 = new StringMessageElement("Message", txtPM, null);
            }else{
                txtPM = "EMPTY";
                sme2 = new StringMessageElement("Message", "EMPTY", null);
            }

            if(filePM != null && !filePM.isEmpty() && !filePM.equals("EMPTY")){
                File fileTMP = new File(filePM);
                fileSizePM = Long.toString(fileTMP.length());
                fileHashPM = Tools.getChecksum(filePM);
            }else{
                //We need to feed messages with value even for null object
                filePM = "EMPTY";
                fileHashPM = "EMPTY";
                fileSizePM = "EMPTY";
            }

            if(passHashPM != null && !passHashPM.isEmpty() && !passHashPM.equals("EMPTY") ){
                //Encrypt the file Name (message already encrypted...)
                //filePM = Tools.encryptAES(filePM, jPasswordPM.getText(), SESSION_SEED);
                //sme3 = new StringMessageElement("FileName", fileTMP.getName(), null);  
                SEED = Base64.encodeBytes(SESSION_SEED) + Core.SPLIT_CHAR +Base64.encodeBytes(aesIV);
                
            }else{
                passHashPM = "EMPTY";
                SEED = "EMPTY";
            }
            
            sme3 = new StringMessageElement("FileName", filePM, null);
            sme4 = new StringMessageElement("FileSize", fileHashPM, null);
            sme5 = new StringMessageElement("FileHash", fileSizePM, null);
            sme6 = new StringMessageElement("Password", passHashPM, null);
            sme7 = new StringMessageElement("Seed", SEED, null);
            
            //Adding the FileName after eventually have crypted it
            
            
            myMessage.addMessageElement(sme);
            myMessage.addMessageElement(sme1);
            myMessage.addMessageElement(sme2);
            myMessage.addMessageElement(sme3);
            myMessage.addMessageElement(sme4);
            myMessage.addMessageElement(sme5);
            myMessage.addMessageElement(sme6);
            myMessage.addMessageElement(sme7);
            myMessage.addMessageElement(sme8);
            myMessage.addMessageElement(sme9);

            //DatagramPacket mdpkt = new DatagramPacket();
            
            //Retrieve the advertisement of the remote pipe peer
            PipeAdvertisement sendAdv = Tools.getPipeAdvertisement(group.getPeerGroupID(),RemoteName,false);
            
            displayLog("[+]Creation of the output Pipe for Direct Message");
            
            //Generating the event of sending output message
            outPipe = pipeSrvc.createOutputPipe(sendAdv, 5000);
            boolean send = outPipe.send(myMessage);
            //propagateMultPipe.send(mdpkt);
            
            if(send){
                displayLog("[+]Message SENT: " + txtPM + "\n"+
                    "[+]To Peer: " + remotePeer + " with our sender ID: " + group.getPeerID().toString() + "\n"+
                    "[+]File: "+filePM+"\n[+]Hash: <"+fileHashPM+">\n[+]Size: "+fileSizePM+"\n"+
                    "[+]Password: "+passHashPM+"\n[+]Seed: "+SEED+"\n"+
                    "[+]Throught Pipe: "+outPipe.getPipeID());
            }else{
                displayLog("[!]Impossible to send the private message: "+txtPM);
            }
            
            outPipe.close();
            

        } catch (IOException ex) {
            displayLog("[!]IOError has sending message <" + txtPM + ">\n"+"[!]"+ex.getMessage());
        } catch (Exception ex) {
            displayLog("[!]Exception has sending message <" + txtPM + ">\n"+"[!]fileName: "+filePM+"\n[!]"+ex.getMessage());
        }
    }
       
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton downloadFilePMR;
    private javax.swing.JPanel jContentPM;
    private javax.swing.JPanel jContentPMR;
    private javax.swing.JButton jCreatePM;
    protected static javax.swing.JDialog jDialogPrivateMsg;
    private javax.swing.JPanel jHeaderAlert3;
    private javax.swing.JPanel jHeaderAlert4;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabelFilePM;
    private javax.swing.JLabel jLabelPwdPM;
    private javax.swing.JLabel jLabelSecured;
    private javax.swing.JTextField jPasswordPM;
    private javax.swing.JProgressBar jProgressBarPMR;
    private javax.swing.JButton jReadPMR;
    protected static javax.swing.JDialog jReceivedPrivateMsg;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel jSecureLevel;
    private javax.swing.JButton jSelectFilePM;
    private javax.swing.JTextArea jTextPrivateMsg;
    private javax.swing.JTextArea jTextPrivateMsgR;
    private javax.swing.JLabel labelFilePMR;
    private java.awt.Label labelPM;
    private java.awt.Label labelPMR;
    private com.petersoft.advancedswing.onoffbutton.OnOffButton onOffFilePM;
    private com.petersoft.advancedswing.onoffbutton.OnOffButton onOffPwdPM;
    // End of variables declaration//GEN-END:variables
}
